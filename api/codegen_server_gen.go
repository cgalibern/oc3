// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /feed/daemon/ping)
	PostFeedDaemonPing(ctx echo.Context) error

	// (POST /feed/daemon/status)
	PostFeedDaemonStatus(ctx echo.Context, params PostFeedDaemonStatusParams) error

	// (POST /feed/object/config)
	PostFeedObjectConfig(ctx echo.Context) error

	// (POST /feed/system)
	PostFeedSystem(ctx echo.Context) error

	// (GET /public/openapi)
	GetSwagger(ctx echo.Context) error

	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostFeedDaemonPing converts echo context to params.
func (w *ServerInterfaceWrapper) PostFeedDaemonPing(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostFeedDaemonPing(ctx)
	return err
}

// PostFeedDaemonStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostFeedDaemonStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostFeedDaemonStatusParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "XDaemonChange" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("XDaemonChange")]; found {
		var XDaemonChange string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for XDaemonChange, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "XDaemonChange", runtime.ParamLocationHeader, valueList[0], &XDaemonChange)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter XDaemonChange: %s", err))
		}

		params.XDaemonChange = &XDaemonChange
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostFeedDaemonStatus(ctx, params)
	return err
}

// PostFeedObjectConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostFeedObjectConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostFeedObjectConfig(ctx)
	return err
}

// PostFeedSystem converts echo context to params.
func (w *ServerInterfaceWrapper) PostFeedSystem(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostFeedSystem(ctx)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/feed/daemon/ping", wrapper.PostFeedDaemonPing)
	router.POST(baseURL+"/feed/daemon/status", wrapper.PostFeedDaemonStatus)
	router.POST(baseURL+"/feed/object/config", wrapper.PostFeedObjectConfig)
	router.POST(baseURL+"/feed/system", wrapper.PostFeedSystem)
	router.GET(baseURL+"/public/openapi", wrapper.GetSwagger)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXbW/bthP/KgT//xctoNrOwzbAe9WHZe02NEGdbgMSo6Cps8ROItnjKYkb6LsPJCVb",
	"ihQH7dpiL/bKsniPv/vd8XTLpSmt0aDJ8fktR3DWaAfhz/Fs5n+k0QSa/KOwtlBSkDJ6+t4Z7d85mUMp",
	"/NP/EdZ8zv833dmcxlM3PUOzKqDkdV0nPAUnUVlvhs/5M5GyN/ChAke8Tvjx7OBbeH2rRUW5QfUR0uj2",
	"6Fu4PTG4UmkK2vv87tsA/EoToBYFWwBeAbKfEA1yL9coe9uvTQoLElSFf7SxwOfcrN6DDFU5DU/PjV6r",
	"zAtYNBaQVGSKsLaj5QiVzryWNGXZZDY4A301+n5dwM27Utx0DpUmyAB3p0rvOSWBGdC4gBWUj3pFcf1O",
	"brNbGywF8TlfbQh4MhR30vg3t1wRlG7UYvNCIIpN+G+sKUy2GRH2/uFDpRBSPr+IQS6TYRHaGg/wT4GE",
	"KuJTt/JPWV6VQj9BEKlYFcDgxhZCB34xZ0GqtZKMDKNcOWakrBBBS2BmzSiHS22jx8mlHkVhy5e+2/Mc",
	"2Mvz8zMWBZg0KbBHF29Onv9weHSwTNgCZAjh+8csAw0oCFK22kSfBlWmNHORrGuD90THxoLr1JoUFTCG",
	"icsNUnIXGleVpcDNHePM250w9orY4uXp299eXOrXp+dM5kJnwNZoym5gZO4PM2FwI8HSpfYp2QqtceC8",
	"UGGkKNTHWJVHMMkmCauc0plXFZLUFbBmRlxqDZkhFWR/ZA6AjcB6NDl+PFqyO0RraLMtZIvZGPeskH+J",
	"DEZ6H+V4SyntSBQFpO8E9ZoqFQRPSJWjnaVFCaPmXGzNe/ps5OAK0CmjH+634HInn8SUGsvR8RgibuNo",
	"rBk7SG2nw77J3coPZkY94rSTVN9r5wBuRGk99flsMpscPEiDVnWYpM8SZIWKNgsfbXS1Ek7Jp1WcpCEL",
	"rxPe7nzlRNYHvAKBgK10/HfSMuGXP8550jERTu/aqAOX1iYUMvY0Nxa0u5JMmqIASQaZsKpTwzk/mMwm",
	"hz4AL+oP5/xoMpvMeLwEQiLTNUA6TQWURk+th8bDahwNp8YbWCO4nMGNcuRbM2q1E86z2ZEorQsDS5sU",
	"Qv/5CoVefZXyOT8zjk4A0hdB98w7TPor1+HscOj7XlfXqijYChjG4CDdOveJH86Oh7ZK5dww/FYtYWen",
	"i3PWQtKcKse2dOlSgs8vemS4WNbJba/gF8vak0pkzvNMZH4XWHoTPeR318h+7MdjfhDnRTvcrEBRAgG6",
	"ELlfIngOIg2Ui3OH/xl1nof53nJTDGMqlCM/u+NF4JgDb91fY9eKcuaskCPjzaOBcdV9ZtLNF1v+Ostb",
	"3e9uwgrqTyfZfmY1HwZjEW0dTb3Qbp1/SPags4M/JHvU2Z33y3qhL8rYOBinu01xnLFvrb/jmEEmEcJT",
	"0GNRr4pU3UPc3rb9dSjTc/G5pAlXvF91eokN2fNli9C5eEfR9yiyKMRS5aS5AtzsQXsR7X0dnJtgPxfh",
	"Ng1B4r+mHPLBVqtCyen2jr/lzadfv9I/Ay2uRZaFSX8H9E/7BL+7IA0+tk9//dcA3AIWQWoQ6+yJDVT9",
	"+BGoQu3XKbZbiAdo/r49+kdo7muc1vu9GH8WFlJYsVKFCmvzso489B+acSeosOBzPjXyiNfL+u8AAAD/",
	"/8tozKkeEwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
