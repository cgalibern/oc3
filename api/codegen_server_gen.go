// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /feed/daemon/ping)
	PostFeedDaemonPing(ctx echo.Context) error

	// (POST /feed/daemon/status)
	PostFeedDaemonStatus(ctx echo.Context, params PostFeedDaemonStatusParams) error

	// (POST /feed/system)
	PostFeedSystem(ctx echo.Context) error

	// (GET /public/openapi)
	GetSwagger(ctx echo.Context) error

	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostFeedDaemonPing converts echo context to params.
func (w *ServerInterfaceWrapper) PostFeedDaemonPing(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostFeedDaemonPing(ctx)
	return err
}

// PostFeedDaemonStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostFeedDaemonStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostFeedDaemonStatusParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "XDaemonChange" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("XDaemonChange")]; found {
		var XDaemonChange string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for XDaemonChange, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "XDaemonChange", runtime.ParamLocationHeader, valueList[0], &XDaemonChange)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter XDaemonChange: %s", err))
		}

		params.XDaemonChange = &XDaemonChange
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostFeedDaemonStatus(ctx, params)
	return err
}

// PostFeedSystem converts echo context to params.
func (w *ServerInterfaceWrapper) PostFeedSystem(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostFeedSystem(ctx)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/feed/daemon/ping", wrapper.PostFeedDaemonPing)
	router.POST(baseURL+"/feed/daemon/status", wrapper.PostFeedDaemonStatus)
	router.POST(baseURL+"/feed/system", wrapper.PostFeedSystem)
	router.GET(baseURL+"/public/openapi", wrapper.GetSwagger)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXX2/bthf9KgR/v4cWUG0nzjZAe+qfZe02NEHtbgMSY6Cpa4mdRLKXV0ncQN99IGnZ",
	"cqQ4aNcFe9iTZfHynsPDw8urWy5NZY0GTY6ntxzBWaMdhD8nk4n/kUYTaPKPwtpSSUHK6PEHZ7R/52QB",
	"lfBP/0dY8ZT/b7zLOY6jbnyOZllCxZumSXgGTqKyPg1P+QuRsXfwsQZHvEn4yeToMVDfa1FTYVB9gizC",
	"Th8D9tTgUmUZaI/5zeMI/EYToBYlmwFeAbIfEA1yH7eZ7HO/NRnMSFAd/tHaAk+5WX4AGXalTZ/ecovG",
	"ApKKJsmAhCrjUxf0OSvqSuhnCCITyxIY3NhS6LA05ixItVKSkWFUKMeMlDUiaAnMrBgVcKltRBxdap60",
	"fByh0rnn47ZU92HnBbDX8/k5iwFMmgzYk4t3py+/O54eLRI2AxkofPuU5aABBUHGluuIaVDlSjMXdVoZ",
	"vIcdGyKnNEEO6NmRohKGNHGFQUruSuPqqhK4vpOc+bwjxt4Qm70+e//Lq0v99mzOZCF0DmyFpuoSI3M/",
	"zYTBjQRLl9ovydZojQPng0ojRak+xV15AqN8lLDaKZ37qUKSugK2seel1pAbUiH2e+YA2ICs09HJ08Et",
	"axKO8LFWCBlPL1rbbDey1WyR9L1nhfxT5ND3nkBZdNy6c4fSjkRZQvaHCMdqZbDyTzwTBM9IVTDkKS0q",
	"GEznVD74Pr4YGLgCdCqe3sMyBMhdfBKXtMkcgYcUcWtHQ4exo5QiqNxDRaON366FC0SxDjR7oJ1F7aN2",
	"BuBGVNZbn09Gk9HRgzZop/YX6VcJskZF65lnG6GWwin5vKZiWxj9nPB2h1UQWU94CQIB2+j477R1wk+/",
	"zXnSSRFG7+ZogpdWJmxkPNPcWNDuSjJpyhIkGWTCqs4epvxoNBkdewI+1A+mfDqajCbcW5mKsJDxCiAb",
	"ZwIqo8fWS+NlNY76VeMdrBBcweBGOfJHM85qK5x3syNRWRcKljYZhPPndyic1TcZT/m5cXQKkL0Kc889",
	"YLJ/2x9PjvvY90Jdq7JkS2AYyUG2BfcLP56c9HNVyrk+/XZaws7PZnPWSrIZVY5t7dK1BE8v9sxwsWiS",
	"270Nv1g03lQid95nIvcX7MKn2FN+d40c1n6Y84M6z9riZgWKCgjQBebK5y5AZMFyse7w3+Ocl6G+t94U",
	"fU6lcuRrd7wIHHPgs/tr7FpRwZwVcqC8eTUwdlkvTLb+an1Hp29o9k83YQ3N55vssLM2PekQoy3Q2Aft",
	"OsmHYo867d9DsdNO23Y41gd9Vcd2av6gVb3zWAximXLSXAGuDzh0FvP9M67YkP1SR7TLECT+80PfD7Ze",
	"lkqOt9fLLc8hbNj+Tv8INLsWeR6KzB3RP+/D4+7d3PvEOPv5XyNwK1gUaaNYp0XZSLXPH4Fq1P4mZ7te",
	"rKfmr9uhv6XmoYPTot+r8RdpIYUVS1Wq0LEtmuhD/40Tr6MaS57ysZFT3iyavwIAAP//qrRyDRQQAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
