// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /feed/daemon/ping)
	PostFeedDaemonPing(ctx echo.Context) error

	// (POST /feed/daemon/status)
	PostFeedDaemonStatus(ctx echo.Context) error

	// (POST /feed/object/config)
	PostFeedObjectConfig(ctx echo.Context) error

	// (POST /feed/system)
	PostFeedSystem(ctx echo.Context) error

	// (GET /public/openapi)
	GetSwagger(ctx echo.Context) error

	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostFeedDaemonPing converts echo context to params.
func (w *ServerInterfaceWrapper) PostFeedDaemonPing(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostFeedDaemonPing(ctx)
	return err
}

// PostFeedDaemonStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostFeedDaemonStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostFeedDaemonStatus(ctx)
	return err
}

// PostFeedObjectConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostFeedObjectConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostFeedObjectConfig(ctx)
	return err
}

// PostFeedSystem converts echo context to params.
func (w *ServerInterfaceWrapper) PostFeedSystem(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostFeedSystem(ctx)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/feed/daemon/ping", wrapper.PostFeedDaemonPing)
	router.POST(baseURL+"/feed/daemon/status", wrapper.PostFeedDaemonStatus)
	router.POST(baseURL+"/feed/object/config", wrapper.PostFeedObjectConfig)
	router.POST(baseURL+"/feed/system", wrapper.PostFeedSystem)
	router.GET(baseURL+"/public/openapi", wrapper.GetSwagger)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYW4/bthL+KwTPeUgAxfZezjmAz1Mu3SZt0V3Em/Zhd2HQ1FhiKpHMcLS7zkL/vSAp",
	"25It29ncUKB9si2O5vLNN5wZP3BpSms0aHJ8/MARnDXaQfhxOhr5D2k0gSb/VVhbKClIGT1874z2z5zM",
	"oRT+278R5nzM/zVc6xzGUze8QDMroOR1XSc8BSdRWa+Gj/kLkbK38KECR7xO+Ono6HtYfadFRblB9RHS",
	"aPbke5g9MzhTaQra2/zP9wH4jSZALQo2AbwFZD8gGvT2zwDSVwJKoy+Uzp5LCZYgfZRLFo0FJBUZY2bv",
	"QdL0TlFuKppKo+cq8wddhwrliJk5i+JMixIco1wQQ/hQKQTHLs4nl2xo5MlwDpAOo+SwUZhwRVC6bcUt",
	"hTzhtLDAx9wRKp35eJsHAlEseL1+EF/rgy4N6DBHgirHSJXgSJTWsTtVFGwGDGGO4HJI2dwg0yaFLrCT",
	"8OY/0B6Cdh+eddKgEtw6DxpfruLvwiSs9R9b/klTlg3qW2cp2mmwtO8waF9hcyD+hIO+7ZWbF3A/LcV9",
	"61Bpggxwfar0nlMSmAH1C5RGKzII6RTBmQolTKWp9A5pgzIHRyioP3IrKO89QHHX4t/cYCmIj/lsQb3U",
	"cNJYeBx6ZKwpTLboEfb2I5NTPr6KTt5s0S3hF8bRZhlu00XmQmcbue3lvUGmtCOh5SfQP+GpINFyfu2W",
	"RbhVpnLTyqaCIJ0K6oDoHz7z90yflc955xbQqXi1dAOjHJixoN2tZLJQoIl5r9nyheQA8iHEZIXg2lJv",
	"NprutJWAFEioYtu75yyvSqGfIYhUzApgcG8LocNdyZwFqeZKMjKMcuWYkbJCBC3B332Uw7W20eLgWvdy",
	"csWHrtnLHNjry8uL5bUkTQrsydXbs5f/Oz45uknYBGRw4b9PWQYafPGkbLaINg2qTGnmYpv1F1i/d6zP",
	"uVZlkqIC+jBxuUFKNqFxVVkKXGwoZ17vgLE3xCavz9/98upa/3p+yWK+2BxN2XaMzG43Ewb3vn9dax+S",
	"rdAaB84LFUaKQn2MWXkCg2yQsMopnflXhSR1C6zpd9daQ2ZIBdn/MwfAemA9GZw+7U3ZJvkibVaJXGLW",
	"xz0r5B8ig55egbL/gguVXhSPrLTQGvvUuXhR7rg0HvbW7H4Ymm68LtkQUqM5Gu5DxC0c9RVjC6nVbbhv",
	"5lzKf0L/7wTVtdo6gHtRWk99PhqMBkcHabD7yvFRgqxQ0WLivY2mZsIp+byKfS1E4d8JT9e2ciLrHZ6B",
	"QMCldPx1tmTCT79f8qSlIpxu6qgDl+YmJDLWNF9duaYoQJJBJqxq5XDMjwajwWlo0Ba0Pxzzk8FoMOKx",
	"JYdA4ugWR6ih9dB4WI2j7VvjbZyoGNwrR740d860y4kr1J/PUKjVNykfb3RTvy3wpLssHo+Od9FlJTfc",
	"sXDUCT8enW67Xirntj1eupk0k2yDQnOqHFsxpM0CPr7q5P/qpk4eOjm+uqk9j0TmPLVE5sfFG6+iA/a6",
	"c+yHu9/ng9BOlvcZxo34hUkXX29H7DNVd4uKsIL6y3K7sfOE5Xp0WIEXWu//h2SPWkv7IdmT1rK9X9YL",
	"fVXWdLernax5FyY7P2VKhPAtjp3xvSrSZQ95OkvRtyFPx8Snk6Yb53KG7ga2vf193SS0+l0v+h5FFoVY",
	"qpw0t4CLPWhPor5vg3Pj7OcivAzDj/L7/6T4WxalrWaFksNVa33gzTbdzfSPQJM7kWWhp2+A/rj/7A7+",
	"D3L+818G4CVgEaQGsdZ41kDV9R+BKtR+immtjlto/rY6+iI09xXO0vpOjD8LCymsmKlChWn1po489Pud",
	"CzSssOBjPjTyhNc39Z8BAAD//22fx/JPFwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
