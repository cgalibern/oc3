// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /feed/daemon/ping)
	PostFeedDaemonPing(ctx echo.Context) error

	// (POST /feed/daemon/status)
	PostFeedDaemonStatus(ctx echo.Context, params PostFeedDaemonStatusParams) error

	// (POST /feed/object/config)
	PostFeedObjectConfig(ctx echo.Context) error

	// (POST /feed/system)
	PostFeedSystem(ctx echo.Context) error

	// (GET /public/openapi)
	GetSwagger(ctx echo.Context) error

	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostFeedDaemonPing converts echo context to params.
func (w *ServerInterfaceWrapper) PostFeedDaemonPing(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostFeedDaemonPing(ctx)
	return err
}

// PostFeedDaemonStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostFeedDaemonStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostFeedDaemonStatusParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "XDaemonChange" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("XDaemonChange")]; found {
		var XDaemonChange string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for XDaemonChange, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "XDaemonChange", runtime.ParamLocationHeader, valueList[0], &XDaemonChange)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter XDaemonChange: %s", err))
		}

		params.XDaemonChange = &XDaemonChange
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostFeedDaemonStatus(ctx, params)
	return err
}

// PostFeedObjectConfig converts echo context to params.
func (w *ServerInterfaceWrapper) PostFeedObjectConfig(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostFeedObjectConfig(ctx)
	return err
}

// PostFeedSystem converts echo context to params.
func (w *ServerInterfaceWrapper) PostFeedSystem(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostFeedSystem(ctx)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/feed/daemon/ping", wrapper.PostFeedDaemonPing)
	router.POST(baseURL+"/feed/daemon/status", wrapper.PostFeedDaemonStatus)
	router.POST(baseURL+"/feed/object/config", wrapper.PostFeedObjectConfig)
	router.POST(baseURL+"/feed/system", wrapper.PostFeedSystem)
	router.GET(baseURL+"/public/openapi", wrapper.GetSwagger)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYXW/bNhf+KwTf96IFVNuJsw3wrvqxrN2GJqjTbUBiBDR1LLGTSPbwKIkb6L8PJC1b",
	"ihQH7dpgF7uK5PP98DmHR7nl0pTWaNDk+OyWIzhrtIPwcjSZ+D/SaAJN/lFYWygpSBk9/uCM9r85mUMp",
	"/NP/EVZ8xv833vkcR6kbn6JZFlDyuq4TnoKTqKx3w2f8hUjZO/hYgSNeJ/xocvAYUd9rUVFuUH2CNIad",
	"PkbYY4NLlaagfczvHgfgN5oAtSjYHPAKkP2EaJB7vY2x9/3WpDAnQVV4o7UFPuNm+QFkOJWT8PTS6JXK",
	"vIJFYwFJRaYIa1tWjlDpzFtJU5abynqyFO2lNinsFQbviqB0g2qbHwSiWPt30FeDeqsCbi5LcdMSKk2Q",
	"Ae6kSu+RksAMaFihNFqRQUgvEZypUMKlNJW+R9ugzMERChqu3ArKBwUori/lFv+VwVIQn/HlmoAnfXUn",
	"jYXPQ4+MNYXJ1gPKPj58rBRCymfnMclF0qdJw8IeQ1IgoYr41Obmc5ZXpdDPEEQqlgUwuLGF0KEDmLMg",
	"1UpJRoZRrhwzUlaIoCUws2KUw4W2MeLoQg+isGV0N+xZDuz12dkpiwpMmhTYk/N3xy9/OJweLBI2BxlS",
	"+P4py0CDP66ULdcxpkGVKc1cbKeVwXuyY0PJtbhAigoYwsTlBim5C42rylLg+o5z5v2OGHtDbP765P1v",
	"ry7025MzJnOhM2ArNGU7MTL3p5kwuJFg6UL7kmyF1jhwXqkwUhTqUzyVJzDKRgmrnNKZNxWS1BWwzRS7",
	"0BoyQyro/sgcABuAdTo6ejp4ZHeItqHN9iAbzIa4Z4X8S2QwMJ1QDreU0o5EUUB6KajTVKkgeEaqHOws",
	"Lcrh1nWxNe/pswHBFaBTRj/cbyHkTj+JJW08x8BDiLi1o6FmbCG1nQ777pZGvzcz6oGgraK6UVsCuBGl",
	"9dTnk9FkdPAgDRrTfpG+SpAVKlrPfbYx1FI4JZ9XcZKGKrxN+HUXKyeyPuElCARstOPbccOEX/4440nL",
	"RZDe9VEHLq1MOMjY09xY0O5KMmmKAiQZZMKq1hnO+MFoMpqGK8GC9sIZn44mowmPl0AoZLwCSMepgNLo",
	"sfXQeFiNo/7UeAcrBJczuFGOfGtGq2bCeTY7EqV1YWD5yzX0nz+h0KtvUj7jp8bRMUD6Ktie+oBJdyk8",
	"nBz2Y98b6loVBVsCw5gcpNvgvvDDyVHfV6mc66ffmCXs9GR+xhpINlLl2JYubUrw2XmHDOeLOrntHPj5",
	"ovakEpnzPBOZ31YW3kUH+d01sh/74ZwfxHneDDcrUJRAgC5k7lcSnoNIA+Xi3OF/RpuXYb433BT9nArl",
	"yM/ueBE45sB799fYtaKcOSvkwHjzaGBcxl+YdP3V1tPWell3u5uwgvrzSbafWZtPl6GMtoHGXmn3wfGQ",
	"7kHrK+Eh3Wlru9+v65W+KmPjYBzvNsVhxr63/o5jBplECE/BjkW7KlJ1D3E73wPfhjKdEF9KmnDF+1Wn",
	"U1ifPV/3EFoX7yD6HkUWlViqnDRXgOs9aM+jv2+D8ybZL0W4KUOQ+K8p+3yw1bJQcry942/55kOye9I/",
	"A82vRZaFSX8H9M/7J8HdBan374CTX/81ADeARZA2iLX2xA1U3fwRqELt1ym2W4h7aP6+Ff0jNPc1ThP9",
	"Xoy/CAsprFiqQoW1eVFHHvoPzbgTVFjwGR8bOeX1ov47AAD//yr0JufAEwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
