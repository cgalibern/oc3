// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /daemon/ping)
	PostDaemonPing(ctx echo.Context) error

	// (POST /daemon/status)
	PostDaemonStatus(ctx echo.Context, params PostDaemonStatusParams) error

	// (POST /daemon/system)
	PostDaemonSystem(ctx echo.Context) error

	// (POST /daemon/system/package)
	PostDaemonSystemPackage(ctx echo.Context) error

	// (GET /public/openapi)
	GetSwagger(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostDaemonPing converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonPing(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDaemonPing(ctx)
	return err
}

// PostDaemonStatus converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonStatus(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostDaemonStatusParams

	headers := ctx.Request().Header
	// ------------- Optional header parameter "XDaemonChange" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("XDaemonChange")]; found {
		var XDaemonChange string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for XDaemonChange, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "XDaemonChange", runtime.ParamLocationHeader, valueList[0], &XDaemonChange)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter XDaemonChange: %s", err))
		}

		params.XDaemonChange = &XDaemonChange
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDaemonStatus(ctx, params)
	return err
}

// PostDaemonSystem converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonSystem(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDaemonSystem(ctx)
	return err
}

// PostDaemonSystemPackage converts echo context to params.
func (w *ServerInterfaceWrapper) PostDaemonSystemPackage(ctx echo.Context) error {
	var err error

	ctx.Set(BasicAuthScopes, []string{})

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostDaemonSystemPackage(ctx)
	return err
}

// GetSwagger converts echo context to params.
func (w *ServerInterfaceWrapper) GetSwagger(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSwagger(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/daemon/ping", wrapper.PostDaemonPing)
	router.POST(baseURL+"/daemon/status", wrapper.PostDaemonStatus)
	router.POST(baseURL+"/daemon/system", wrapper.PostDaemonSystem)
	router.POST(baseURL+"/daemon/system/package", wrapper.PostDaemonSystemPackage)
	router.GET(baseURL+"/public/openapi", wrapper.GetSwagger)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXTW8bNxD9KwO2hwTYSvJHW0A95aNp3BaxYCloAVsHijvaZbpLMuSsbMXY/14MqZVl",
	"SVYDxDF6yEm74uPM45s3JPdWKFs7a9BQEMNb4TE4awLGl+PBgH+UNYSG+FE6V2klSVvT/xCs4f+CKrGW",
	"/PS9x7kYiu/6dzH7aTT0R97OKqxF27aZyDEorx2HEUNx/odoM3H6NMleyhwu8GODgVLWo6fI+t7Ihkrr",
	"9SfMU9qTp0j7xvqZznM0nPPHpxH4zBB6IysYo1+gh1+9t14wbjWZY7+zOY5JUhPfaOlQDIWdfUAVq9KF",
	"H94K561DTzo5MkeSukpPm0lfQNnU0vzgUeZyViHgjaukiUuD4FDpuVZAFqjUAaxSjfdoFIKdA5V4ZVzK",
	"2LsyIuv4BPLaFMwnrKneTzspEd5OJiNIAFA2R3h2efHm1c/HJ0fTDMaoIoWfnkOBBr0kzGG2TDmt14U2",
	"EJJOc+sfYAf7yGlDWKBndqSpwn2ahNJ6yralCU1dS7/cCg4ctwdwRjB+e/7+z9dX5t35BFQpTYEw97be",
	"JEb2YZoZ4I1CR1eGl+Qa72zAwKDKKlnpT6kqz7BX9DJogjYFT5WK9AJhZc8rY7CwpCP2FwiIsEfWk97p",
	"870lazPh8WOjPeZieNnZZl3ITrNptus9J9U/ssC9vgzLQMmWW0M8hqrxmpZjdnly60wGrV40VK4bi+fE",
	"f+8ol0SOY89QevQdOr29sb6WJIbi978mItsIEUe3YzALbeY28kueENahCQsFylYVKrIepNMiEwv0Idlk",
	"0Bv0jpgAQ3lwKE56g95AsBRUxoX0c4m1NX3H4nJT2kC7hrvAucdQAt7oQFzVNKtrDtI1BpK1C9HrxuYY",
	"S8f9Hct8louhGNlAr+O8ESfLtk+k4928fpX3wXTXuqpghrACYr4mwOs+Hpzuxqx1CLtL6KZlMDofT6CT",
	"ZTWqA6xNt+kIMby854XLaZvd3qv35bRlK8oisFtlwfvzlEPcz/Cw9KzaFteFxuvUt8y4d1DqcdcWTnpZ",
	"I6EPkbTm2CXKPJrNyGi+v9OcV3Fn6FwpdzlVOhB3fdpCAgTk6LwBXmsqITipcE/nTlPrYqCXNl8+2om1",
	"ceK097cH8g222d6bz76Aa1yfQXcXl8PY0w579DnYo407wn9hTzbO9sNYBj22L9cb4mf4MmIh10HZBfrl",
	"YUemwF/HCyvW33zwyD7ob5ydnR8OF3i0mvB16tzR+VboLy+0a2aVVv31JeFWFLinwL8hja9lUcQD44s+",
	"JrdvWA9+Nv4PBO4ESyKxYm37bwAAAP//qwfmSVoPAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
