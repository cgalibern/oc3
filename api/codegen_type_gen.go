// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package api

import (
	"time"
)

const (
	BasicAuthScopes  = "basicAuth.Scopes"
	BearerAuthScopes = "bearerAuth.Scopes"
)

// NodeStatus defines model for NodeStatus.
type NodeStatus = map[string]interface{}

// ObjectConfig defines model for ObjectConfig.
type ObjectConfig struct {
	App        *string   `json:"app,omitempty"`
	Comment    *string   `json:"comment,omitempty"`
	Env        *string   `json:"env,omitempty"`
	FlexMax    *int      `json:"flex_max,omitempty"`
	FlexMin    *int      `json:"flex_min,omitempty"`
	FlexTarget *int      `json:"flex_target,omitempty"`
	Path       string    `json:"path"`
	RawConfig  *[]byte   `json:"raw_config,omitempty"`
	Scope      *[]string `json:"scope,omitempty"`
	Topology   *string   `json:"topology,omitempty"`
}

// Problem defines model for Problem.
type Problem struct {
	// Detail A human-readable explanation specific to this occurrence of the
	// problem.
	Detail string `json:"detail"`

	// Status The HTTP status code ([RFC7231], Section 6) generated by the
	// origin server for this occurrence of the problem.
	Status int `json:"status"`

	// Title A short, human-readable summary of the problem type.  It SHOULD
	// NOT change from occurrence to occurrence of the problem, except
	// for purposes of localization (e.g., using proactive content
	// negotiation; see [RFC7231], Section 3.4).
	Title string `json:"title"`
}

// Package defines model for package.
type Package struct {
	Arch        string     `json:"arch"`
	InstalledAt *time.Time `json:"installed_at,omitempty"`
	Name        string     `json:"name"`
	Sig         string     `json:"sig"`
	Type        string     `json:"type"`
	Version     string     `json:"version"`
}

// System defines model for system.
type System struct {
	Package *[]Package `json:"package,omitempty"`
}

// Version defines model for version.
type Version struct {
	Version string `json:"version"`
}

// N400 defines model for 400.
type N400 = Problem

// N401 defines model for 401.
type N401 = Problem

// N403 defines model for 403.
type N403 = Problem

// N500 defines model for 500.
type N500 = Problem

// PostFeedDaemonStatusParams defines parameters for PostFeedDaemonStatus.
type PostFeedDaemonStatusParams struct {
	XDaemonChange *string `json:"XDaemonChange,omitempty"`
}

// PostFeedDaemonStatusJSONRequestBody defines body for PostFeedDaemonStatus for application/json ContentType.
type PostFeedDaemonStatusJSONRequestBody = NodeStatus

// PostFeedObjectConfigJSONRequestBody defines body for PostFeedObjectConfig for application/json ContentType.
type PostFeedObjectConfigJSONRequestBody = ObjectConfig

// PostFeedSystemJSONRequestBody defines body for PostFeedSystem for application/json ContentType.
type PostFeedSystemJSONRequestBody = System
