openapi: 3.0.0

info:
  title: opensvc collector api
  version: 0.0.1

paths:
  /public/openapi:
    get:
      operationId: GetSwagger
      tags:
        - public
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /daemon/system:
    post:
      description: |
        Post daemon system discovery
      operationId: PostDaemonSystem
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/system'
      responses:
        200:
          $ref: '#/components/responses/200'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      security:
        - basicAuth: [ ]
        - bearerAuth: [ ]
      tags:
        - agent

  /daemon/status:
    post:
      description: |
        Post daemon status view from node.
      operationId: PostDaemonStatus
      parameters:
        - in: header
          name: XDaemonChange
          schema:
            type: string
            description: list of changes separated with space
          required: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeStatus'
      responses:
        200:
          $ref: '#/components/responses/200'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      security:
        - basicAuth: [ ]
        - bearerAuth: [ ]
      tags:
        - agent

  /daemon/system/package:
    post:
      operationId: PostDaemonSystemPackage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/package'
      responses:
        200:
          $ref: '#/components/responses/200'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
      security:
        - basicAuth: [ ]
        - bearerAuth: [ ]
      tags:
        - agent

components:
  schemas:
    NodeStatus:
      type: object

    Problem:
      type: object
      properties:
        detail:
          description: |
            A human-readable explanation specific to this occurrence of the
            problem.
          type: string
        status:
          type: integer
          description: |
            The HTTP status code ([RFC7231], Section 6) generated by the
            origin server for this occurrence of the problem.
        title:
          type: string
          description: |
            A short, human-readable summary of the problem type.  It SHOULD
            NOT change from occurrence to occurrence of the problem, except
            for purposes of localization (e.g., using proactive content
            negotiation; see [RFC7231], Section 3.4).
      required:
        - detail
        - status
        - title

    system:
      type: object

    package:
      type: object

  parameters:

    inPathNodeName:
      in: path
      name: nodename
      required: true
      schema:
        type: string
        example: localhost
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    '200':
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
    '204':
      description: No Content
    '400':
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
    '401':
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
    '403':
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
    '404':
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
    '408':
      description: Request Timeout
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
    '409':
      description: Conflict
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
    '500':
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
    '503':
      description: Service Unavailable
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
